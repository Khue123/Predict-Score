# -*- coding: utf-8 -*-
"""Untitled31.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_fNYP4jx_m1lLd0HeethXZs_voUG7DaV
"""

# -*- coding: utf-8 -*-
"""Untitled

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wVuPf5dKnrA8N4zO8Z4y8udl3pO0Hgri
"""

import pandas as pd
import pydotplus as pydotplus
from IPython.core.display import Image
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor, export_graphviz

# Đọc tệp CSV vào DataFrame
file_path = '/content/Filtered_Fundamental_score_VNstock.csv'
df = pd.read_csv(file_path)

# Hiển thị một vài hàng đầu tiên của DataFrame để hiểu cấu trúc
print("Một vài hàng đầu tiên của dữ liệu:")
print(df.head())

# Danh sách các cột cần lọc giá trị âm
columns_to_filter = ['Asset (total)', 'Average equity (owner)', 'Net income (profit)', 'Operating profit ', 'Revenues']

# Lọc ra các hàng có giá trị âm trong các cột đã chọn
df_filtered = df[(df[columns_to_filter] >= 0).all(axis=1)]

# Hiển thị một vài hàng đầu tiên của DataFrame đã lọc
print("\nMột vài hàng đầu tiên của dữ liệu đã lọc:")
print(df_filtered.head())


# Đường dẫn để lưu DataFrame đã lọc trong thư mục hiện tại
output_path = '/content/Filtered_Fundamental_score_VNstock.csv'

# Lưu DataFrame đã lọc vào tệp CSV mới
df_filtered.to_csv(output_path, index=False)
print(f"\nDữ liệu đã lọc được lưu vào {output_path}")

# Tìm giá trị max và min cho các cột đã chọn
max_values = df[columns_to_filter].max()
min_values = df[columns_to_filter].min()

# Tạo một DataFrame mới để chứa giá trị max và min
result_df = pd.DataFrame({'Max Values': max_values, 'Min Values': min_values})

# Hiển thị kết quả
print("\nGiá trị lớn nhất và nhỏ nhất của các cột đã chọn:")
print(result_df)

# Lưu kết quả vào một tệp CSV mới
output_path = 'Max_Min_Values_Fundamental_score_VNstock.csv'
result_df.to_csv(output_path)
print(f"\nGiá trị max và min đã được lưu vào {output_path}")

# Lọc dữ liệu cho các ngành cần thiết
sectors_of_interest = ['Retail', 'Service', 'Tourism and entertainment', 'Petroleum', 'Mining', 'Utility']
df_filtered = df[df['Sector'].isin(sectors_of_interest)]

# Danh sách các cột cần tìm giá trị max và min
columns_to_filter = ['Asset (total)', 'Average equity (owner)', 'Net income (profit)', 'Operating profit ', 'Revenues']
# Sử dụng groupby và agg để tìm max và min theo time và sector
grouped_df = df_filtered.groupby(['Time', 'Sector'])[columns_to_filter].agg(['max', 'min']).reset_index()

# Hiển thị kết quả
print(grouped_df)

# Lưu kết quả vào một file CSV
output_path = 'Grouped_Max_Min_Sectors.csv'
grouped_df.to_csv(output_path, index=False)
print(f'\nKết quả đã được lưu vào {output_path}')

# Tách biến độc lập (features) và biến phụ thuộc (target)
X = df[['Asset (total)', 'Average equity (owner)', 'Net income (profit)', 'Operating profit ', 'Revenues']]
y = df['Score']

# Chia dữ liệu thành tập huấn luyện và tập kiểm tra
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Khởi tạo và huấn luyện mô hình cây quyết định
model = DecisionTreeRegressor(random_state=42,max_leaf_nodes = 5)
model.fit(X_train, y_train)


# Dự đoán trên tập kiểm tra
y_pred = model.predict(X_test)

# Đánh giá mô hình
mse = mean_squared_error(y_test, y_pred)
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
# Tính MAPE
def mean_absolute_percentage_error(y_true, y_pred):
    y_true, y_pred = pd.Series(y_true), pd.Series(y_pred)
    return (abs((y_true - y_pred) / y_true).mean()) * 100

mape = mean_absolute_percentage_error(y_test, y_pred)

print(f'Mean Squared Error: {mse}')
print(f'Mean Absolute Error (MAE): {mae}')
print(f'R-squared: {r2}')
print(f'Mean Absolute Percentage Error (MAPE): {mape}%')

# Lưu kết quả dự đoán vào DataFrame
results_df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
output_path = 'Decision_Tree_Predictions.csv'
results_df.to_csv(output_path, index=False)
print(f'\nKết quả dự đoán đã được lưu vào {output_path}')

# Hiển thị cây quyết định
dot_data = export_graphviz(model, out_file=None,
                           feature_names=X.columns,
                           filled=True, rounded=True,
                           special_characters=True)
# Use pydotplus to convert the .dot file to a PNG image
graph = pydotplus.graph_from_dot_data(dot_data)

# Display the image
Image(graph.create_png())